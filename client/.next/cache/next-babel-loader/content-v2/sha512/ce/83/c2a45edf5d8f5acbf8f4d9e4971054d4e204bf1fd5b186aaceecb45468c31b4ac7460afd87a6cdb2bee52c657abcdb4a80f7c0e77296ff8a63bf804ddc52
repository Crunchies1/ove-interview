{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Documents/ove-interview/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Documents/ove-interview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { fetchHistoricData } from '../api/actions.js'; // State is represented by a list of key-objects\n// key: SYMBOL\n// object: {\n//   PRICE: float\n//   INDICATOR: int\n//   CHANGE: float\n//   GRAPH: Array of x-axis and y-axis\n// }\n// ====== HELPER FUNCTIONS FOR FETCH DATA ======\n// eslint-disable-next-line no-extend-native\n\nDate.prototype.prevDays = function (days) {\n  var date = new Date(this.valueOf()); // Return the current date minus days\n\n  date.setDate(date.getDate() - days);\n  return date;\n}; // Returns the array of dates we are looking through\n\n\nfunction getDates(startDate, stopDate) {\n  var dateArray = [];\n  var currentDate = startDate;\n\n  while (currentDate >= stopDate) {\n    // Converts date string into YYYY-MM-DD format\n    var date = currentDate.toUTCString().split(', ')[1];\n    date = new Date(date).toISOString().split('T')[0];\n    dateArray.push(date);\n    currentDate = currentDate.prevDays(1);\n  }\n\n  return dateArray;\n} // This function adds new entries to the state map following the sample state\n\n\nfunction addToState(array, key, value, date) {\n  array[key] = {\n    price: value.toPrecision(6),\n    indicator: null,\n    change: null,\n    graph: [[date], [value]]\n  };\n} // This function adds values to the graph array in the current state map\n\n\nfunction addToGraph(array, key, value, date) {\n  array[key].graph[0].unshift(date);\n  array[key].graph[1].unshift(value);\n} // This function calculates the change in percentage from the first day of tracking to the last\n\n\nfunction calculateChange(array, key) {\n  // Obtain the current value and the latest recorded value\n  var curVal = array[key].graph[1][array[key].graph[1].length - 1];\n  var prevVal = array[key].graph[1][0]; // Calculate percentage change and set array values\n\n  if (curVal > prevVal) {\n    array[key].indicator = 1;\n    array[key].change = '+' + (100 * (curVal - prevVal) / prevVal).toFixed(2) + '%';\n  } else if (curVal === prevVal) {\n    array[key].indicator = 0;\n    array[key].change = 0 .toFixed(2) + '%';\n  } else {\n    array[key].indicator = -1;\n    array[key].change = (100 * (curVal - prevVal) / prevVal).toFixed(2) + '%';\n  }\n} // =============================================\n// Calls API to fetch and cache the required data\n\n\nfunction fetchData(_x, _x2) {\n  return _fetchData.apply(this, arguments);\n} // Function to generate the index state based on the dates given\n\n\nfunction _fetchData() {\n  _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(base, timeframe) {\n    var dateArray;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // const data = await fetchLatestData()\n            // const cacheId = data.base + data.date\n            // Obtain the dates of the previous 7 days in yy-mm-dd format\n            dateArray = getDates(new Date(), new Date().prevDays(timeframe)); // For each value in the data array, send an HTTP request\n\n            _context3.next = 3;\n            return Promise.all(dateArray.map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(date) {\n                var pastData, cacheId;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.prev = 0;\n\n                        if (!(window.localStorage.getItem(base + date) === null)) {\n                          _context2.next = 7;\n                          break;\n                        }\n\n                        _context2.next = 4;\n                        return fetchHistoricData(date, base);\n\n                      case 4:\n                        pastData = _context2.sent;\n                        // Cache the fetched data\n                        cacheId = pastData.base + date;\n                        window.localStorage.setItem(cacheId, JSON.stringify(pastData.rates));\n\n                      case 7:\n                        _context2.next = 12;\n                        break;\n\n                      case 9:\n                        _context2.prev = 9;\n                        _context2.t0 = _context2[\"catch\"](0);\n                        console.log('error' + _context2.t0);\n\n                      case 12:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, null, [[0, 9]]);\n              }));\n\n              return function (_x6) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n\n          case 3:\n            return _context3.abrupt(\"return\", dateArray);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _fetchData.apply(this, arguments);\n}\n\nfunction genState(dateArray, base) {\n  // Initialise the state array\n  var rateData = {}; // Loop through the dates in the date array\n\n  for (var i = 0; i < dateArray.length; i++) {\n    // Retrieve the rates for each date using current base\n    var date = dateArray[i];\n    var rates = window.localStorage.getItem(base + date); // Generate state using day 1 rates\n\n    if (i === 0) {\n      rateData[base] = {\n        price: 1,\n        indicator: null,\n        change: null,\n        graph: null\n      };\n    } // Loop through each rate\n\n\n    rates = JSON.parse(rates);\n\n    for (var _i = 0, _Object$keys = Object.keys(rates); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n\n      if (key !== base) {\n        if (i === 0) {\n          // Generate state using day 1 rates\n          addToState(rateData, key, rates[key], date);\n        } else if (i < dateArray.length - 1) {\n          // Add the rate data to the graphs\n          addToGraph(rateData, key, rates[key], date);\n        } else {\n          // Lastly, add the rate data to the graphs then calculate the final\n          // indicator and change values\n          addToGraph(rateData, key, rates[key], date);\n          calculateChange(rateData, key);\n        }\n      }\n    }\n  }\n\n  return rateData;\n}\n\nexport var FETCH_DATA = 'FETCH_DATA'; // Implemented as if it can be extended in the future\n\nexport var calculator = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(action, base, timeframe) {\n    var dA, rD;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = action;\n            _context.next = _context.t0 === FETCH_DATA ? 3 : 8;\n            break;\n\n          case 3:\n            _context.next = 5;\n            return fetchData(base, timeframe);\n\n          case 5:\n            dA = _context.sent;\n            rD = genState(dA, base);\n            return _context.abrupt(\"return\", rD);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function calculator(_x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/HP/Documents/ove-interview/client/src/pages/state/calculator.js"],"names":["fetchHistoricData","Date","prototype","prevDays","days","date","valueOf","setDate","getDate","getDates","startDate","stopDate","dateArray","currentDate","toUTCString","split","toISOString","push","addToState","array","key","value","price","toPrecision","indicator","change","graph","addToGraph","unshift","calculateChange","curVal","length","prevVal","toFixed","fetchData","base","timeframe","Promise","all","map","window","localStorage","getItem","pastData","cacheId","setItem","JSON","stringify","rates","console","log","genState","rateData","i","parse","Object","keys","FETCH_DATA","calculator","action","dA","rD"],"mappings":"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","sourcesContent":["import { fetchHistoricData } from '../api/actions.js'\r\n\r\n// State is represented by a list of key-objects\r\n// key: SYMBOL\r\n// object: {\r\n//   PRICE: float\r\n//   INDICATOR: int\r\n//   CHANGE: float\r\n//   GRAPH: Array of x-axis and y-axis\r\n// }\r\n\r\n// ====== HELPER FUNCTIONS FOR FETCH DATA ======\r\n\r\n// eslint-disable-next-line no-extend-native\r\nDate.prototype.prevDays = function (days) {\r\n  const date = new Date(this.valueOf())\r\n  // Return the current date minus days\r\n  date.setDate(date.getDate() - days)\r\n  return date\r\n}\r\n\r\n// Returns the array of dates we are looking through\r\nfunction getDates (startDate, stopDate) {\r\n  const dateArray = []\r\n  let currentDate = startDate\r\n  while (currentDate >= stopDate) {\r\n    // Converts date string into YYYY-MM-DD format\r\n    let date = currentDate.toUTCString().split(', ')[1]\r\n    date = new Date(date).toISOString().split('T')[0]\r\n    dateArray.push(date)\r\n    currentDate = currentDate.prevDays(1)\r\n  }\r\n  return dateArray\r\n}\r\n\r\n// This function adds new entries to the state map following the sample state\r\nfunction addToState (array, key, value, date) {\r\n  array[key] = {\r\n    price: value.toPrecision(6),\r\n    indicator: null,\r\n    change: null,\r\n    graph: [\r\n      [date],\r\n      [value]\r\n    ]\r\n  }\r\n}\r\n\r\n// This function adds values to the graph array in the current state map\r\nfunction addToGraph (array, key, value, date) {\r\n  array[key].graph[0].unshift(date)\r\n  array[key].graph[1].unshift(value)\r\n}\r\n\r\n// This function calculates the change in percentage from the first day of tracking to the last\r\nfunction calculateChange (array, key) {\r\n  // Obtain the current value and the latest recorded value\r\n  const curVal = array[key].graph[1][array[key].graph[1].length - 1]\r\n  const prevVal = array[key].graph[1][0]\r\n  // Calculate percentage change and set array values\r\n  if (curVal > prevVal) {\r\n    array[key].indicator = 1\r\n    array[key].change = '+' + (100 * (curVal - prevVal) / prevVal).toFixed(2) + '%'\r\n  } else if (curVal === prevVal) {\r\n    array[key].indicator = 0\r\n    array[key].change = (0).toFixed(2) + '%'\r\n  } else {\r\n    array[key].indicator = -1\r\n    array[key].change = (100 * (curVal - prevVal) / prevVal).toFixed(2) + '%'\r\n  }\r\n}\r\n\r\n// =============================================\r\n\r\n// Calls API to fetch and cache the required data\r\nasync function fetchData (base, timeframe) {\r\n  // const data = await fetchLatestData()\r\n  // const cacheId = data.base + data.date\r\n  // Obtain the dates of the previous 7 days in yy-mm-dd format\r\n  const dateArray = getDates(new Date(), (new Date()).prevDays(timeframe))\r\n  // For each value in the data array, send an HTTP request\r\n  await Promise.all(dateArray.map(async (date) => {\r\n    try {\r\n      // Check to see if the data we require has already been cached\r\n      let pastData\r\n      if (window.localStorage.getItem(base + date) === null) {\r\n        // Otherwise, simply fetch the data from ratesapi.io\r\n        pastData = await fetchHistoricData(date, base)\r\n        // Cache the fetched data\r\n        const cacheId = pastData.base + date\r\n        window.localStorage.setItem(cacheId, JSON.stringify(pastData.rates))\r\n      }\r\n    } catch (error) {\r\n      console.log('error' + error)\r\n    }\r\n  }))\r\n  // Return the array of dates used\r\n  return dateArray\r\n}\r\n\r\n// Function to generate the index state based on the dates given\r\nfunction genState (dateArray, base) {\r\n  // Initialise the state array\r\n  const rateData = {}\r\n  // Loop through the dates in the date array\r\n  for (let i = 0; i < dateArray.length; i++) {\r\n    // Retrieve the rates for each date using current base\r\n    const date = dateArray[i]\r\n    let rates = window.localStorage.getItem(base + date)\r\n\r\n    // Generate state using day 1 rates\r\n    if (i === 0) {\r\n      rateData[base] = {\r\n        price: 1,\r\n        indicator: null,\r\n        change: null,\r\n        graph: null\r\n      }\r\n    }\r\n\r\n    // Loop through each rate\r\n    rates = JSON.parse(rates)\r\n    for (const key of Object.keys(rates)) {\r\n      if (key !== base) {\r\n        if (i === 0) {\r\n          // Generate state using day 1 rates\r\n          addToState(rateData, key, rates[key], date)\r\n        } else if (i < dateArray.length - 1) {\r\n          // Add the rate data to the graphs\r\n          addToGraph(rateData, key, rates[key], date)\r\n        } else {\r\n          // Lastly, add the rate data to the graphs then calculate the final\r\n          // indicator and change values\r\n          addToGraph(rateData, key, rates[key], date)\r\n          calculateChange(rateData, key)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return rateData\r\n}\r\n\r\nexport const FETCH_DATA = 'FETCH_DATA'\r\n\r\n// Implemented as if it can be extended in the future\r\nexport const calculator = async (action, base, timeframe) => {\r\n  switch (action) {\r\n    case FETCH_DATA: {\r\n      const dA = await fetchData(base, timeframe)\r\n      const rD = genState(dA, base)\r\n      return rD\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}