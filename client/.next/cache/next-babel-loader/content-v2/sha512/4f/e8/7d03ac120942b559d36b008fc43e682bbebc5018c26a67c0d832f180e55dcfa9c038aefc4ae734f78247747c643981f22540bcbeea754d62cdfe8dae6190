{"ast":null,"code":"import { fetchHistoricData } from '../api/actions.js'; // State is represented by a list of key-objects\n// key: SYMBOL\n// object: {\n//   PRICE: float\n//   INDICATOR: int\n//   CHANGE: float\n//   GRAPH: Array of x-axis and y-axis\n// }\n// ====== HELPER FUNCTIONS FOR FETCH DATA ======\n// eslint-disable-next-line no-extend-native\n\nDate.prototype.prevDays = function (days) {\n  const date = new Date(this.valueOf()); // Return the current date minus days\n\n  date.setDate(date.getDate() - days);\n  return date;\n}; // Returns the array of dates we are looking through\n\n\nfunction getDates(startDate, stopDate) {\n  const dateArray = [];\n  let currentDate = startDate;\n\n  while (currentDate >= stopDate) {\n    // Converts date string into YYYY-MM-DD format\n    let date = currentDate.toUTCString().split(', ')[1];\n    date = new Date(date).toISOString().split('T')[0];\n    dateArray.push(date);\n    currentDate = currentDate.prevDays(1);\n  }\n\n  return dateArray;\n} // This function adds new entries to the state map following the sample state\n\n\nfunction addToState(array, key, value, date) {\n  array[key] = {\n    price: value.toPrecision(6),\n    indicator: null,\n    change: null,\n    graph: [[date], [value]]\n  };\n} // This function adds values to the graph array in the current state map\n\n\nfunction addToGraph(array, key, value, date) {\n  array[key].graph[0].unshift(date);\n  array[key].graph[1].unshift(value);\n} // This function calculates the change in percentage from the first day of tracking to the last\n\n\nfunction calculateChange(array, key) {\n  // Obtain the current value and the latest recorded value\n  const curVal = array[key].graph[1][array[key].graph[1].length - 1];\n  const prevVal = array[key].graph[1][0]; // Calculate percentage change and set array values\n\n  if (curVal > prevVal) {\n    array[key].indicator = 1;\n    array[key].change = '+' + (100 * (curVal - prevVal) / prevVal).toFixed(2) + '%';\n  } else if (curVal === prevVal) {\n    array[key].indicator = 0;\n    array[key].change = 0 .toFixed(2) + '%';\n  } else {\n    array[key].indicator = -1;\n    array[key].change = (100 * (curVal - prevVal) / prevVal).toFixed(2) + '%';\n  }\n} // =============================================\n// Calls API to fetch and cache the required data\n\n\nasync function fetchData(base, timeframe) {\n  // const data = await fetchLatestData()\n  // const cacheId = data.base + data.date\n  // Obtain the dates of the previous 7 days in yy-mm-dd format\n  const dateArray = getDates(new Date(), new Date().prevDays(timeframe)); // For each value in the data array, send an HTTP request\n\n  await Promise.all(dateArray.map(async date => {\n    try {\n      // Check to see if the data we require has already been cached\n      let pastData;\n\n      if (window.localStorage.getItem(base + date) === null) {\n        // Otherwise, simply fetch the data from ratesapi.io\n        pastData = await fetchHistoricData(date, base); // Cache the fetched data\n\n        const cacheId = pastData.base + date;\n        window.localStorage.setItem(cacheId, JSON.stringify(pastData.rates));\n      }\n    } catch (error) {\n      console.log('error' + error);\n    }\n  })); // Return the array of dates used\n\n  return dateArray;\n} // Function to generate the index state based on the dates given\n\n\nfunction genState(dateArray, base) {\n  // Initialise the state array\n  const rateData = {}; // Loop through the dates in the date array\n\n  for (let i = 0; i < dateArray.length; i++) {\n    // Retrieve the rates for each date using current base\n    const date = dateArray[i];\n    let rates = window.localStorage.getItem(base + date); // Generate state using day 1 rates\n\n    if (i === 0) {\n      rateData[base] = {\n        price: 1,\n        indicator: null,\n        change: null,\n        graph: null\n      };\n    } // Loop through each rate\n\n\n    rates = JSON.parse(rates);\n\n    for (const key of Object.keys(rates)) {\n      if (key !== base) {\n        if (i === 0) {\n          // Generate state using day 1 rates\n          addToState(rateData, key, rates[key], date);\n        } else if (i < dateArray.length - 1) {\n          // Add the rate data to the graphs\n          addToGraph(rateData, key, rates[key], date);\n        } else {\n          // Lastly, add the rate data to the graphs then calculate the final\n          // indicator and change values\n          addToGraph(rateData, key, rates[key], date);\n          calculateChange(rateData, key);\n        }\n      }\n    }\n  }\n\n  return rateData;\n}\n\nexport const FETCH_DATA = 'FETCH_DATA'; // Implemented as if it can be extended in the future\n\nexport const calculator = async (action, base, timeframe) => {\n  switch (action) {\n    case FETCH_DATA:\n      {\n        const dA = await fetchData(base, timeframe);\n        const rD = genState(dA, base);\n        return rD;\n      }\n  }\n};","map":{"version":3,"sources":["C:/Users/HP/Documents/ove-interview/client/src/pages/state/calculator.js"],"names":["fetchHistoricData","Date","prototype","prevDays","days","date","valueOf","setDate","getDate","getDates","startDate","stopDate","dateArray","currentDate","toUTCString","split","toISOString","push","addToState","array","key","value","price","toPrecision","indicator","change","graph","addToGraph","unshift","calculateChange","curVal","length","prevVal","toFixed","fetchData","base","timeframe","Promise","all","map","pastData","window","localStorage","getItem","cacheId","setItem","JSON","stringify","rates","error","console","log","genState","rateData","i","parse","Object","keys","FETCH_DATA","calculator","action","dA","rD"],"mappings":"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","sourcesContent":["import { fetchHistoricData } from '../api/actions.js'\r\n\r\n// State is represented by a list of key-objects\r\n// key: SYMBOL\r\n// object: {\r\n//   PRICE: float\r\n//   INDICATOR: int\r\n//   CHANGE: float\r\n//   GRAPH: Array of x-axis and y-axis\r\n// }\r\n\r\n// ====== HELPER FUNCTIONS FOR FETCH DATA ======\r\n\r\n// eslint-disable-next-line no-extend-native\r\nDate.prototype.prevDays = function (days) {\r\n  const date = new Date(this.valueOf())\r\n  // Return the current date minus days\r\n  date.setDate(date.getDate() - days)\r\n  return date\r\n}\r\n\r\n// Returns the array of dates we are looking through\r\nfunction getDates (startDate, stopDate) {\r\n  const dateArray = []\r\n  let currentDate = startDate\r\n  while (currentDate >= stopDate) {\r\n    // Converts date string into YYYY-MM-DD format\r\n    let date = currentDate.toUTCString().split(', ')[1]\r\n    date = new Date(date).toISOString().split('T')[0]\r\n    dateArray.push(date)\r\n    currentDate = currentDate.prevDays(1)\r\n  }\r\n  return dateArray\r\n}\r\n\r\n// This function adds new entries to the state map following the sample state\r\nfunction addToState (array, key, value, date) {\r\n  array[key] = {\r\n    price: value.toPrecision(6),\r\n    indicator: null,\r\n    change: null,\r\n    graph: [\r\n      [date],\r\n      [value]\r\n    ]\r\n  }\r\n}\r\n\r\n// This function adds values to the graph array in the current state map\r\nfunction addToGraph (array, key, value, date) {\r\n  array[key].graph[0].unshift(date)\r\n  array[key].graph[1].unshift(value)\r\n}\r\n\r\n// This function calculates the change in percentage from the first day of tracking to the last\r\nfunction calculateChange (array, key) {\r\n  // Obtain the current value and the latest recorded value\r\n  const curVal = array[key].graph[1][array[key].graph[1].length - 1]\r\n  const prevVal = array[key].graph[1][0]\r\n  // Calculate percentage change and set array values\r\n  if (curVal > prevVal) {\r\n    array[key].indicator = 1\r\n    array[key].change = '+' + (100 * (curVal - prevVal) / prevVal).toFixed(2) + '%'\r\n  } else if (curVal === prevVal) {\r\n    array[key].indicator = 0\r\n    array[key].change = (0).toFixed(2) + '%'\r\n  } else {\r\n    array[key].indicator = -1\r\n    array[key].change = (100 * (curVal - prevVal) / prevVal).toFixed(2) + '%'\r\n  }\r\n}\r\n\r\n// =============================================\r\n\r\n// Calls API to fetch and cache the required data\r\nasync function fetchData (base, timeframe) {\r\n  // const data = await fetchLatestData()\r\n  // const cacheId = data.base + data.date\r\n  // Obtain the dates of the previous 7 days in yy-mm-dd format\r\n  const dateArray = getDates(new Date(), (new Date()).prevDays(timeframe))\r\n  // For each value in the data array, send an HTTP request\r\n  await Promise.all(dateArray.map(async (date) => {\r\n    try {\r\n      // Check to see if the data we require has already been cached\r\n      let pastData\r\n      if (window.localStorage.getItem(base + date) === null) {\r\n        // Otherwise, simply fetch the data from ratesapi.io\r\n        pastData = await fetchHistoricData(date, base)\r\n        // Cache the fetched data\r\n        const cacheId = pastData.base + date\r\n        window.localStorage.setItem(cacheId, JSON.stringify(pastData.rates))\r\n      }\r\n    } catch (error) {\r\n      console.log('error' + error)\r\n    }\r\n  }))\r\n  // Return the array of dates used\r\n  return dateArray\r\n}\r\n\r\n// Function to generate the index state based on the dates given\r\nfunction genState (dateArray, base) {\r\n  // Initialise the state array\r\n  const rateData = {}\r\n  // Loop through the dates in the date array\r\n  for (let i = 0; i < dateArray.length; i++) {\r\n    // Retrieve the rates for each date using current base\r\n    const date = dateArray[i]\r\n    let rates = window.localStorage.getItem(base + date)\r\n\r\n    // Generate state using day 1 rates\r\n    if (i === 0) {\r\n      rateData[base] = {\r\n        price: 1,\r\n        indicator: null,\r\n        change: null,\r\n        graph: null\r\n      }\r\n    }\r\n\r\n    // Loop through each rate\r\n    rates = JSON.parse(rates)\r\n    for (const key of Object.keys(rates)) {\r\n      if (key !== base) {\r\n        if (i === 0) {\r\n          // Generate state using day 1 rates\r\n          addToState(rateData, key, rates[key], date)\r\n        } else if (i < dateArray.length - 1) {\r\n          // Add the rate data to the graphs\r\n          addToGraph(rateData, key, rates[key], date)\r\n        } else {\r\n          // Lastly, add the rate data to the graphs then calculate the final\r\n          // indicator and change values\r\n          addToGraph(rateData, key, rates[key], date)\r\n          calculateChange(rateData, key)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return rateData\r\n}\r\n\r\nexport const FETCH_DATA = 'FETCH_DATA'\r\n\r\n// Implemented as if it can be extended in the future\r\nexport const calculator = async (action, base, timeframe) => {\r\n  switch (action) {\r\n    case FETCH_DATA: {\r\n      const dA = await fetchData(base, timeframe)\r\n      const rD = genState(dA, base)\r\n      return rD\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}