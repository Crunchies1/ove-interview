The file at question (control/images.js) contains 3 top level functions. The 
first one I will go into detail about is `sendViewportDetails`. Like the name, 
this function simply calculates the bounds, zoom level and dimensions of the 
current viewport and sets the current state of the ove window to an object
containing all those parameters. (The viewport is the user's visible area
of the image) However, the current state is only changed if the viewport has
changed. The current application state (contents of window.ove.state.current) 
are sent as a WebSocket broadcast, updating the current state on all clients 
that receive the message.

===========

Next, we have `initControl`. I will try and condense this into a short 
explanation. This takes a state and an optional viewport. The controller is 
resized in order to fit within the current window. If there already is a state, 
we use that  state. Otherwise we initialise a new state. Any URL query params 
passed are taken into consideration so that we can set the states tileSources 
to that URL. (An OPS TileSource is an interface which contains the most basic 
implementation required to create a smooth transition between layers in an image
pyramid.) Then the currentState is stored.

A small helper function is then defined called `setupHandlers`. This does 
exactly what it says it does, and sets up OpenSeadragon event handlers using a 
predefined constant and viewport details from `sendViewportDetails`. 
(Event handlers call functions when certain events happen)

The `initControl` function then loads OpenSeadragon with the current state and
calls setupHandlers. If the viewport parameter was set, we hide the image until 
all processing has finished and the new viewport is calculated.

===========

Lastly, we have `beginInitialization`. This combines the previous two functions.
This function firstly loads the current state and checks to see if it is 
attempting to load an image for the first time (by checking the current 
loadedState). If the image has been preloaded and the viewport information is 
available, we call initControl on the current state and viewport. Otherwise,
if there is no loaded state, we simply call initControl on the state. If we 
don't fall in either of those categories, we load the default state. 


